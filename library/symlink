#!/usr/bin/env python

DESCRIPTION = '''
module: symlink
short_description: Make relative symbolic links
description:
  - This module exists solely because the standard M(file) module will
    not create a symbolic link with a relative target.  This module
    will only overwrite existing symbolic links; if C(path) exists but
    is not a symbolic link then this module will fail.
author: Dale Sedivec <dale@codefu.org>
options:
  src:
    description:
      - The path the symbolic link will refer to
    required: true
  path:
    description:
      - The path to the symbolic link
    required: true
'''

EXAMPLES = '''
- name: Use local PAM authentication files
  symlink: src={{ item }}-auth-local path=/etc/pam.d/{{ item }}-auth
  with_items:
    - system
    - password
'''


import os
import os.path


def main():
    module = AnsibleModule(
        argument_spec=dict(
            src=dict(required=True),
            path=dict(required=True),
            ),
        supports_check_mode=True,
        )

    params = module.params
    src = params["src"]
    path = params["path"]

    if os.path.isabs(src):
        abs_src = src
    else:
        abs_src = os.path.join(os.path.dirname(path), src)
    if not os.path.exists(abs_src):
        module.fail_json(msg="src=%r doesn't exist" % (abs_src,))

    create_symlink = True
    if not os.path.isabs(path):
        module.fail_json(msg="path must be absolute")
    elif os.path.exists(path):
        if not os.path.islink(path):
            msg = ("%r exists but is not a symlink, I will not clobber it" %
                   (path,))
            module.fail_json(msg=msg)
        current_src = os.readlink(path)
        if current_src == src:
            create_symlink = False
        elif not module.check_mode:
            os.unlink(path)

    if create_symlink and not module.check_mode:
        os.symlink(src, path)

    module.exit_json(changed=create_symlink)


# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
